#############################################################################
## data source definition
#############################################################################

source irapp
{
    # data source type. mandatory, no default value
    # known types are mysql, pgsql, mssql, xmlpipe, xmlpipe2, odbc
    type            = mysql  # 数据库类型
    # some straightforward parameters for SQL source types
    #数据库主机地址
    sql_host        = 127.0.0.1 
    #数据库用户名
    sql_user        = wendy2003888      
    #数据库密码
    sql_pass        = wendy2003888       
    #数据库名称
    sql_db          = irapp
    # 数据库采用的端口
    sql_port        = 3306  
    # pre-query, executed before the main fetch query
    # multi-value, optional, default is empty list of queries
    #执行sql前要设置的字符集 
    sql_query_pre   = SET NAMES UTF8 
    # main document fetch query mandatory, integer document ID field MUST be the first selected column
}


source imdb:irapp
{
    # 全文检索要显示的内容，在这里尽可能不使用where或group by，将where与groupby的内容交给sphinx，由sphinx进行条件过滤与groupby效率会更高
    # select 出来的字段必须至少包括一个唯一主键(ARTICLESID)以及要全文检索的字段，你计划原本在where中要用到的字段也要select出来，这里不需要使用orderby
    sql_query   = \
        SELECT _id, 1 AS tid, orgname, year, country, imdbScor, description, storyline, url FROM imdb
    sql_query_info    = SELECT * FROM imdb WHERE id=$_id

    #####以下是用来过滤或条件查询的属性############
    #sql_attr_ 开头的表示一些属性字段，你原计划要用在where,orderby,groupby中的字段要在这里定义
    # unsigned integer attribute declaration

    sql_attr_uint            = tid

    #sql_attr_uint = c_comment_num  # 无符号整数属性
    #sql_attr_uint = c_id  # 无符号整数属性
    # boolean attribute declaration
    # sql_attr_bool     = is_deleted
    # bigint attribute declaration
    # sql_attr_bigint       = my_bigint_id
    # UNIX timestamp attribute declaration
    # sql_attr_timestamp    = posted_ts
    # floating point attribute declaration
    # sql_attr_float        = lat_radians
    # string attribute declaration
    #sql_field_string       = c_title
    #sql_field_string       = c_content
    # JSON attribute declaration
    # sql_attr_json     = properties
    # combined field plus attribute declaration (from a single column)
    # stores column as an attribute, but also indexes it as a full-text field
    #
    # sql_field_string  = author
    
    
}

source news:irapp
{
    # 全文检索要显示的内容，在这里尽可能不使用where或group by，将where与groupby的内容交给sphinx，由sphinx进行条件过滤与groupby效率会更高
    # select 出来的字段必须至少包括一个唯一主键(ARTICLESID)以及要全文检索的字段，你计划原本在where中要用到的字段也要select出来，这里不需要使用orderby
    sql_query   = \
        SELECT _id, 2 AS tid, title, content, date FROM news
    sql_query_info          = SELECT * FROM news WHERE id=$_id


    #####以下是用来过滤或条件查询的属性############
    #sql_attr_ 开头的表示一些属性字段，你原计划要用在where,orderby,groupby中的字段要在这里定义
    # unsigned integer attribute declaration
    sql_attr_uint            = tid
    #sql_attr_uint = c_comment_num  # 无符号整数属性
    #sql_attr_uint = c_id  # 无符号整数属性
    # boolean attribute declaration
    # sql_attr_bool     = is_deleted
    # bigint attribute declaration
    # sql_attr_bigint       = my_bigint_id
    # UNIX timestamp attribute declaration
    # sql_attr_timestamp    = posted_ts
    # floating point attribute declaration
    # sql_attr_float        = lat_radians
    # string attribute declaration
    #sql_field_string       = c_title
    #sql_field_string       = c_content
    # JSON attribute declaration
    # sql_attr_json     = properties
    # combined field plus attribute declaration (from a single column)
    # stores column as an attribute, but also indexes it as a full-text field
    #
    # sql_field_string  = author

    
}

index imdb
{
    #数据源名
    source = imdb
    # 索引记录存放目录
    path = /usr/local/var/data/imdb  # Distribution Dependant, VALIDATE
    # 文档信息存储方式
    docinfo = extern
    #缓存数据内存锁定
    mlock = 0
    # 形态学
    morphology = none
    # 索引的词最小长度
    min_word_len = 1
    #数据编码
    charset_type = utf-8
    #最小前缀
    min_prefix_len = 0
    #最小中缀
    min_infix_len = 1 

    charset_table = 0..9, A..Z->a..z, a..z, \
                                U+C0->a, U+C1->a, U+C2->a, U+C3->a, U+C4->a, U+C5->a, U+C6->a, \
                                U+C7->c,U+E7->c, U+C8->e, U+C9->e, U+CA->e, U+CB->e, U+CC->i, \
                                U+CD->i, U+CE->i, U+CF->i, U+D0->d, U+D1->n, U+D2->o, U+D3->o, \
                                U+D4->o, U+D5->o, U+D6->o, U+D8->o, U+D9->u, U+DA->u, U+DB->u, \
                                U+DC->u, U+DD->y, U+DE->t, U+DF->s, \
                                U+E0->a, U+E1->a, U+E2->a, U+E3->a, U+E4->a, U+E5->a, U+E6->a, \
                                U+E7->c,U+E7->c, U+E8->e, U+E9->e, U+EA->e, U+EB->e, U+EC->i, \
                                U+ED->i, U+EE->i, U+EF->i, U+F0->d, U+F1->n, U+F2->o, U+F3->o, \
                                U+F4->o, U+F5->o, U+F6->o, U+F8->o, U+F9->u, U+FA->u, U+FB->u, \
                                U+FC->u, U+FD->y, U+FE->t, U+FF->s

}


#index imdb : irapp {
#    source          = imdb
#    path            = /usr/local/var/data/imdb # Distribution Dependant, VALIDATE
#}


index news
{
    #数据源名
    source = news
    # 索引记录存放目录
    path = /usr/local/var/data/news  # Distribution Dependant, VALIDATE
    # 文档信息存储方式
    docinfo = extern
    #缓存数据内存锁定
    mlock = 0
    # 形态学
    morphology = none
    # 索引的词最小长度
    min_word_len = 1

    html_strip      = 0


    #数据编码
    #charset_type        = utf-8
    charset_type        = zh_cn.utf-8
    #最小前缀
    min_prefix_len = 0
    #最小中缀
    min_infix_len = 1 
    charset_dictpath = /usr/local/mmseg3/etc/
    #charset_table       = 0..9, A..Z->a..z, _, a..z, U+410..U+42F->U+430..U+44F, U+430..U+44F
    #stopwords      = /path/to/stowords.txt的位置
    ngram_len                    = 0
    
}



indexer  
{  
    # 内存限制
    mem_limit  = 32M  
}

searchd  
{  
    # 监听端口
    listen          = 9312  
    # 服务进程日志
    log         =  /usr/local/var/log/searchd.log
    # 客户端查询日志
    query_log       = /usr/local/var/log/query.log
    # 请求超时
    read_timeout            = 5  
    # 同时可执行的最大searchd 进程数
    max_children            = 30  
    #进程ID文件
    pid_file        = /usr/local/var/run/searchd.pid
    # 查询结果的最大返回数    
    max_matches     = 1000  
    # 是否支持无缝切换，做增量索引时通常需要
    seamless_rotate         = 1  
}  
# --eof--